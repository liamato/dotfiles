# Prints an error to the stderr
error() {
    (>&2 echo $@)
}

# Sources the files pased as arguments
ssource() {
    local x
    for x in $@; do
        if [ -r  $x ]; then
            . "$x"
        else
            error "File not readable: $x"
        fi
    done
}

# Prints the path of the shellfile of the current shell
sfile() {
    if [ -n "$DOTFILES_DIR" -a -n "$SHELL_NAME" -a -f "$DOTFILES_DIR/shells/$SHELL_NAME/$1" ]; then
        echo $DOTFILES_DIR/shells/$SHELL_NAME/$1
    else
        error "File not found: $DOTFILES_DIR/shells/$SHELL_NAME/$1"
    fi
}

# Prints the path of the gloval shellfile
# Required code duplication to avoid recursive calls
__shellfile() {
    if [ -n "$DOTFILES_DIR" -a -f "$DOTFILES_DIR/shells/shell/$1" ]; then
        echo $DOTFILES_DIR/shells/shell/$1
    else
        error "File not found: $DOTFILES_DIR/shells/shell/$1"
    fi
}

# Sources a shellfile of the current shell
ssfile() {
    ssource "$(sfile $1)"
}

# Sources a gloval shellfile
shsfile() {
    ssource "$(__shellfile $1)"
}

# Sources a file on the $HOME
source_home_file() {
    if [ -f "$HOME/$1" ] ; then
        ssource "$HOME/$1"
    fi
}

# Prints the shell name
shellName() {
    basename $(ps -o command -p "$$" --no-headers | cut -f1 -d ' ')
}

# Prints the script path (no absolute path)
__scriptName() {
    case "$(shellName)" in
        bash) echo '${BASH_SOURCE[0]}' ;;
        zsh) echo '$0' ;;
        sh) echo '$0' ;;
        dash) echo '$0' ;;
    esac
}

# Prints the absolute path of the script
scriptPath(){
    eval readlink -f $(__scriptName)
}
